int mod;
struct matrix
{
    int v[3][3];
    int row,col;
};
matrix multiply(matrix a,matrix b)
{
    matrix r;
    r.row = a.row;
    r.col = b.col;
    for (int i=0;i<a.row;++i)
    {
        for (int j=0;j<b.col;++j)
        {
            int sum=0;
            for (int k=0;k<a.col;++k)
            {
                sum+=(a.v[i][k]*b.v[k][j])%mod;
                sum%=mod;
            }
            r.v[i][j]=sum;
        }
    }
    return r;
}
matrix power(matrix mat,int n)
{
    matrix result;
    result.v[0][0]=result.v[1][1]=1;
    result.v[0][1]=result.v[1][0]=0;
    result.row=result.col=2;
    while(n>0)
    {
        if(n%2)
        {
            result=multiply(result,mat);
        }
        mat=multiply(mat,mat);
        n=n/2;
    }
    return result;
}
matrix find_answer(matrix mat,int a,int b)
{
    matrix d;
    d.v[0][0]=a;
    d.v[0][1]=b;
    //fib[0]=a,fib[1]=b
    d.v[1][0]=d.v[1][1]=0;
    d.row=d.col=2;
    return multiply(d,mat);
}
int main()
{
    int t;
    scanf("%d",&t);
    for(int c=1;c<=t;++c)
    {
        mod=1;
        int n,a,b,m;
        scanf("%d%d%d%d",&a,&b,&n,&m);
        for(int i=0;i<m;++i)
        {
            mod*=10;
        }
        matrix mat;
        mat.row=mat.col=2;
        mat.v[0][0]=0;
        mat.v[0][1]=mat.v[1][0]=mat.v[1][1]=1;
        mat=power(mat,n);
        matrix ans=find_answer(mat,a,b);
        printf("Case %d: %d\n",c,ans.v[0][0]);
    }
    return 0;
}
