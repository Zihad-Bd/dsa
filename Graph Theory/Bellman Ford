
int bellman_ford(int g[][3],int n,int dis[],int e,int par[])
{
    for(int i=1;i<=n;++i)
    {
        dis[i]=10e8;
    }
    dis[1]=0;
    for(int i=1;i<=n;++i)
    {
        par[i]=-1;
    }
    for(int i=1;i<=n-1;++i)
    {
        for(int j=0;j<e;++j)
        {
            if(dis[g[j][0]]+g[j][2]<dis[g[j][1]])
            {
                dis[g[j][1]]=dis[g[j][0]]+g[j][2];
                par[g[j][1]]=g[j][0];

            }
        }
    }
    for(int j=0;j<e;++j)
    {
        if(dis[g[j][0]]+g[j][2]<dis[g[j][1]])
        {
            return 0;
        }
    }
}
void path(int par[],int dest,int dis[])
{
    if(dis[dest]==10e8)
    {
        printf("Path cost:Infinity\n");
    }
    else
    {
        printf("Path cost:%d\n",dis[dest]);
    }
    int k=dest;
    vector<int>p;
    int src=1;
    while(src!=dest)
    {
        p.push_back(dest);
        dest=par[dest];
        if(dest==-1)
        {
            printf("No path from 1 to %d\n",k);
            return;
        }
        p.push_back(1);
        int Size=p.size();
        for(int i=Size-1;i>-1;--i)
        {
            printf("%d ",p[i]);
        }
        printf("\n");
    }
}
int main()
{
    int node,e;
    scanf("%d%d",&node,&e);
    int g[e+5][3],dis[node+5],par[node+5];
    for(int i=0;i<e;++i)
    {
        int node1,node2,w;
        scanf("%d%d%d",&node1,&node2,&w);
        g[i][0]=node1;
        g[i][1]=node2;
        g[i][2]=w;
    }
    if(!bellman_ford(g,node,dis,e,par))
    {
        printf("Negative cycle detected.So,there is no shortest path from other node");
    }
    else
    {
        printf("How many path you want to know?\n");
        int q;
        scanf("%d",&q);
        while(q--)
        {
            int dest;
            scanf("%d",&dest);
            path(par,dest,dis);
        }
    }
    return 0;
}
