vector<ll> st(lim), en(lim);

ll Time = -1;

void dfs(ll u, ll par, vector<ll> G[]) {
   st[u] = ++Time;
   for (auto v : G[u]) {
      if (v != par) {
         dfs(v, u, G);
      }
   }
   en[u] = Time;
}

int main() {
   IOS;
   ll n;
   cin >> n;
   vector<ll> G[n + 5];
   for (ll i = 0; i < n - 1; ++i) {
      ll n1, n2;
      cin >> n1 >> n2;
      G[n1].eb(n2);
      G[n2].eb(n1);
   }
   dfs(1, 1, G);
   ll q;
   cin >> q;
   while (q--) {
      ll subTree, node;
      cin >> subTree >> node;
      cout << (st[node] >= st[subTree] && st[node] <= en[subTree] ?
       "YES" : "NO") << endl;
   }
   return 0;
}
