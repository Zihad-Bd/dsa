#include<bits/stdc++.h>
#define pr(x) cerr << "\n" << (#x) << " is " << (x) << endl
#define ll long long
#define ull unsigned long long
#define Toggle(n,i) (n^(1<<i))
#define Check(n,i) (n&(1<<i))
#define Set(n,i) (n|(1<<i))
#define Reset(n,i) (n&(~(1<<i)))
#define fo(i,x,y) for(int i=(x);i<=(y);++i)
#define me(arr,val) memset(arr,val,sizeof arr)
#define inf INT_MAX
#define infl LLONG_MAX
#define mod 1000000007
#define f first
#define s second
#define  g(t,a)  (get<a>(t))
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
//int dx[]={+1,-1,0,0};//vertical horizontal
//int dy[]={0,0,+1,-1};//vertical horizontal
//int dx[]={+1,+1,-1,-1,+2,-2,+2,-2};//knights move
//int dy[]={+2,-2,+2,-2,+1,+1,-1,-1};//knights move
//int dx[]={+1,-1,0,0,+1,+1,-1,-1};//vertical horizontal diagonal
//int dy[]={0,0,+1,-1,-1,+1,+1,-1};//vertical horizontal diagonal
using namespace std;
using namespace __gnu_pbds;
/*typedef tree<int, null_type,less<int>, rb_tree_tag,
             tree_order_statistics_node_update>indexed_set;
for set use above*/
typedef tree<pair<int,int>, null_type,less_equal<pair<int, int>>, rb_tree_tag,
tree_order_statistics_node_update> indexed_multiset;


int Next[100005][30],End[100005],fail[100005],freq[100005];
int node;
string text;
void prefix_tree(string str,int pat_ind)
{
    int u=0;
    for(int i=0;str[i];++i)
    {
        int ch=str[i]-'a';
        if(!Next[u][ch])
        {
            Next[u][ch]=++node;
        }
        u=Next[u][ch];
    }
    End[pat_ind]=u;
}
void find_failure()
{
    queue<int>q;
    for(int i=0;i<26;++i)
    {
        if(Next[0][i])
        {
            q.push(Next[0][i]);
        }
    }
    while(!q.empty())
    {
        int u=q.front();
        q.pop();
        for(int i=0;i<26;++i)
        {
            int v=Next[u][i];
            if(!v)
            {
                continue;
            }
            q.push(v);
            int pf=fail[u];
            while(pf&&!Next[pf][i])
            {
                pf=fail[pf];
            }
            fail[v]=Next[pf][i];
        }
    }
}
void Search()
{
    int len=text.length();
    for(int i=0,j=0;i<len;++i)
    {
        int ch=text[i]-'a';
        while(j&&!Next[j][ch])
        {
            j=fail[j];
        }
        j=Next[j][ch];
        int temp=j;
        while(temp)
        {
            ++freq[temp];
            temp=fail[temp];
        }
    }
}
int main()
{
    cin>>text;
    int n;
    scanf("%d",&n);
    string patterns[n+5];
    for(int i=1;i<=n;++i)
    {
        cin>>patterns[i];
        prefix_tree(patterns[i],i);
    }
    find_failure();
    Search();
    for(int i=1;i<=n;++i)
    {
        printf("%s occurs %d times\n",patterns[i].c_str(),freq[End[i]]);
    }
    return 0;
}



